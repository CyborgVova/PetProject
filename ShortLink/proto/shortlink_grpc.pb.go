// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/shortlink.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkBuilderClient is the client API for LinkBuilder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkBuilderClient interface {
	Get(ctx context.Context, in *ShortLink, opts ...grpc.CallOption) (*LongLink, error)
	Post(ctx context.Context, in *LongLink, opts ...grpc.CallOption) (*ShortLink, error)
}

type linkBuilderClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkBuilderClient(cc grpc.ClientConnInterface) LinkBuilderClient {
	return &linkBuilderClient{cc}
}

func (c *linkBuilderClient) Get(ctx context.Context, in *ShortLink, opts ...grpc.CallOption) (*LongLink, error) {
	out := new(LongLink)
	err := c.cc.Invoke(ctx, "/LinkBuilder/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkBuilderClient) Post(ctx context.Context, in *LongLink, opts ...grpc.CallOption) (*ShortLink, error) {
	out := new(ShortLink)
	err := c.cc.Invoke(ctx, "/LinkBuilder/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkBuilderServer is the server API for LinkBuilder service.
// All implementations must embed UnimplementedLinkBuilderServer
// for forward compatibility
type LinkBuilderServer interface {
	Get(context.Context, *ShortLink) (*LongLink, error)
	Post(context.Context, *LongLink) (*ShortLink, error)
	mustEmbedUnimplementedLinkBuilderServer()
}

// UnimplementedLinkBuilderServer must be embedded to have forward compatible implementations.
type UnimplementedLinkBuilderServer struct {
}

func (UnimplementedLinkBuilderServer) Get(context.Context, *ShortLink) (*LongLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLinkBuilderServer) Post(context.Context, *LongLink) (*ShortLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedLinkBuilderServer) mustEmbedUnimplementedLinkBuilderServer() {}

// UnsafeLinkBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkBuilderServer will
// result in compilation errors.
type UnsafeLinkBuilderServer interface {
	mustEmbedUnimplementedLinkBuilderServer()
}

func RegisterLinkBuilderServer(s grpc.ServiceRegistrar, srv LinkBuilderServer) {
	s.RegisterService(&LinkBuilder_ServiceDesc, srv)
}

func _LinkBuilder_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkBuilderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LinkBuilder/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkBuilderServer).Get(ctx, req.(*ShortLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkBuilder_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkBuilderServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LinkBuilder/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkBuilderServer).Post(ctx, req.(*LongLink))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkBuilder_ServiceDesc is the grpc.ServiceDesc for LinkBuilder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkBuilder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LinkBuilder",
	HandlerType: (*LinkBuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _LinkBuilder_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _LinkBuilder_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortlink.proto",
}
