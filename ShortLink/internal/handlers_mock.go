// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"
	database "shortlink/database"

	gomock "github.com/golang/mock/gomock"
)

// MockRandomable is a mock of Randomable interface.
type MockRandomable struct {
	ctrl     *gomock.Controller
	recorder *MockRandomableMockRecorder
}

// MockRandomableMockRecorder is the mock recorder for MockRandomable.
type MockRandomableMockRecorder struct {
	mock *MockRandomable
}

// NewMockRandomable creates a new mock instance.
func NewMockRandomable(ctrl *gomock.Controller) *MockRandomable {
	mock := &MockRandomable{ctrl: ctrl}
	mock.recorder = &MockRandomableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomable) EXPECT() *MockRandomableMockRecorder {
	return m.recorder
}

// String10 mocks base method.
func (m *MockRandomable) String10() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String10")
	ret0, _ := ret[0].(string)
	return ret0
}

// String10 indicates an expected call of String10.
func (mr *MockRandomableMockRecorder) String10() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String10", reflect.TypeOf((*MockRandomable)(nil).String10))
}

// MockBaseHandle is a mock of BaseHandle interface.
type MockBaseHandle struct {
	ctrl     *gomock.Controller
	recorder *MockBaseHandleMockRecorder
}

// MockBaseHandleMockRecorder is the mock recorder for MockBaseHandle.
type MockBaseHandleMockRecorder struct {
	mock *MockBaseHandle
}

// NewMockBaseHandle creates a new mock instance.
func NewMockBaseHandle(ctrl *gomock.Controller) *MockBaseHandle {
	mock := &MockBaseHandle{ctrl: ctrl}
	mock.recorder = &MockBaseHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseHandle) EXPECT() *MockBaseHandleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBaseHandle) Create(value *database.Mapping) *database.Mapping {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(*database.Mapping)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBaseHandleMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBaseHandle)(nil).Create), value)
}

// Find mocks base method.
func (m *MockBaseHandle) Find(dest *database.Mapping, left, right string) *database.Mapping {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", dest, left, right)
	ret0, _ := ret[0].(*database.Mapping)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockBaseHandleMockRecorder) Find(dest, left, right interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBaseHandle)(nil).Find), dest, left, right)
}
